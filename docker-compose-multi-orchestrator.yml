version: '3.8'

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 20
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB for Payment Orchestrator
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for Inventory Orchestrator
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: inventory_orchestrator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Payment Orchestrator (MongoDB) - Port 8080
  payment-orchestrator:
    build:
      context: ./payment-orch-example
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # MANDATORY configuration
      ORCHESTRATOR_CONSUMER_TOPIC: payment-input-topic
      ORCHESTRATOR_CONSUMER_GROUP_ID: payment-orchestrator-group
      ORCHESTRATOR_CONSUMER_BOOTSTRAP_SERVERS: kafka:29092
      ORCHESTRATOR_PRODUCER_TOPIC: payment-output-topic
      ORCHESTRATOR_PRODUCER_BOOTSTRAP_SERVERS: kafka:29092
      ORCHESTRATOR_DATABASE_STRATEGY: RELIABLE
      
      # MongoDB connection
      SPRING_DATA_MONGODB_URI: mongodb://root:rootpassword@mongodb:27017/payment-orchestrator?authSource=admin
      SPRING_DATA_MONGODB_DATABASE: payment-orchestrator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Inventory Orchestrator (PostgreSQL) - Port 8081
  inventory-orchestrator:
    build:
      context: ./inventory-orch-postgres-example
      dockerfile: ../payment-orch-example/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      # MANDATORY configuration - different topics!
      ORCHESTRATOR_CONSUMER_TOPIC: inventory-input-topic
      ORCHESTRATOR_CONSUMER_GROUP_ID: inventory-orchestrator-group
      ORCHESTRATOR_CONSUMER_BOOTSTRAP_SERVERS: kafka:29092
      ORCHESTRATOR_PRODUCER_TOPIC: inventory-output-topic
      ORCHESTRATOR_PRODUCER_BOOTSTRAP_SERVERS: kafka:29092
      ORCHESTRATOR_DATABASE_STRATEGY: OUTBOX
      
      # PostgreSQL connection
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/inventory_orchestrator
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      
      # Different port
      SERVER_PORT: 8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  kafka-data:
  mongodb-data:
  postgres-data: