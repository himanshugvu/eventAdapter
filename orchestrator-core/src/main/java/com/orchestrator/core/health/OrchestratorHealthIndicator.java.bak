package com.orchestrator.core.health;

import com.orchestrator.core.store.EventStatus;
import com.orchestrator.core.store.EventStore;
import org.springframework.boot.actuator.health.Health;
import org.springframework.boot.actuator.health.HealthIndicator;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

@Component
@ConditionalOnClass(HealthIndicator.class)
public class OrchestratorHealthIndicator implements HealthIndicator {
    
    private final EventStore eventStore;
    private final KafkaTemplate<String, String> kafkaTemplate;
    
    public OrchestratorHealthIndicator(EventStore eventStore, KafkaTemplate<String, String> kafkaTemplate) {
        this.eventStore = eventStore;
        this.kafkaTemplate = kafkaTemplate;
    }
    
    @Override
    public Health health() {
        try {
            long failedEvents = eventStore.countByStatus(EventStatus.FAILED);
            long pendingEvents = eventStore.countByStatus(EventStatus.RECEIVED);
            
            Health.Builder builder = Health.up()
                .withDetail("events.failed", failedEvents)
                .withDetail("events.pending", pendingEvents)
                .withDetail("kafka.producer.metrics", kafkaTemplate.metrics());
            
            if (failedEvents > 1000) {
                builder = Health.down()
                    .withDetail("reason", "High number of failed events")
                    .withDetail("events.failed", failedEvents);
            }
            
            return builder.build();
            
        } catch (Exception e) {
            return Health.down()
                .withDetail("error", e.getMessage())
                .build();
        }
    }
}